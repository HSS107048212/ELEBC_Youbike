# -*- coding: utf-8 -*-
"""04_EV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IQElGqDWui9TrFJKrtqLkFukz87tnwzo


# Formal Version (Executing from here)

## Get the files in the dir_path and filtering (UI: directory_path)
"""

# 讀取資料夾中的excel檔名
import os
import pandas as pd
# 指定你的目錄路徑
directory_path = 'C:/Users/Elebc_GPU_Server/Desktop/排程抓資料/'
# C:/Users/Elebc_GPU_Server/Desktop/排程抓資料/
# /content/


# 獲取目錄中的所有檔案和子目錄名稱
files_and_directories = os.listdir(directory_path)
print(files_and_directories)
file=[]
for item in files_and_directories:
    # 檢查是否包含指定日期和文件名
    if "merged_data" in item:
        print("Matched File:", item)
        file.append(item)

# 打印出列表
print(file)

"""## Choose the specific date by formation (UI: days)"""

import os
import datetime

# 獲取今天的日期
today = datetime.date.today()

# 計算 ? 天前的日期開始的資料
## 後續會接for迴圈，所以假設days=5，那麼前5天，前4天，前3天，前2天，前1天都會被計算。
## 如果days=1，那麼就是算前1天。
days_ago = today - datetime.timedelta(days=1) #後續更改----------------------------------------------------------------------------

# 將日期格式化為 YYYY-MM-DD
formatted_date = days_ago.strftime('%Y-%m-%d')
print(formatted_date)
# 指定你的目錄路徑

# 搜索與計算出的日期匹配的文件名，並排除特定文件
matched_files = [f for f in file if formatted_date <= f ]

# 排序文件名列表，假設日期和時間格式固定，可以直接按字符串排序
matched_files = sorted(matched_files)

# 打印出匹配的文件名
print(matched_files)

"""## Define Processing Function"""

# Function to calculate IN_ride and OUT_ride for a single row of values
def calculate_rides(values):
    differences = values[:-1] - values[1:]
    INPUT_ride = differences[differences > 0].sum()
    OUTPUT_ride = differences[differences < 0].sum()
    return INPUT_ride, OUTPUT_ride

# General function to process multiple rows and update the DataFrame
def process_all_values(data):
    # Adding new columns for IN_ride and OUT_ride
    data['INPUT_ride'] = 0
    data['OUTPUT_ride'] = 0

    for index, row in data.iterrows():
        values = row[1:-2].values  # Update to exclude new columns from calculation
        INPUT_ride, OUTPUT_ride = calculate_rides(values)
        data.at[index, 'INPUT_ride'] = INPUT_ride
        data.at[index, 'OUTPUT_ride'] = OUTPUT_ride

    return data

"""## Import EV file to Goolge Drive"""

from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

# C:/Users/Elebc_GPU_Server/Desktop/排程抓資料/
# /content/

# 設置Google Drive API的認證
credentials = service_account.Credentials.from_service_account_file(
    f'{directory_path}rich-operand-418201-63c868c738c8.json',  # 請替換成你的認證文件路徑
    scopes=['https://www.googleapis.com/auth/drive']
)

# 創建Google Drive API的服務
drive_service = build('drive', 'v3', credentials=credentials)
# 要上傳到的Google Drive文件夾的ID
folder_id = '1GbiPbZ71JegNvpSxJ4Gkv3SPLWdCzWxy'  # 請替換成目標文件夾的ID

"""## Main Function: Input Youbike 2.0 Data to Processing Function"""

files = [(f"{directory_path}{filename}", filename[0:10]) for filename in matched_files]
print(files)
print()

for file_path, time_label in files:
    # Read data from file
    data = pd.read_excel(file_path)
    EV_data = process_all_values(data)
    EV_data["EV"]=EV_data['INPUT_ride']
    # Assuming 'merged_data' is a pandas DataFrame
    EV_data.to_excel(f"{time_label} EV.xlsx", index=False)  # index=False to avoid writing row indices to the file

    # 要上傳的Excel文件路徑
    excel_file_path = f'{directory_path}{time_label} EV.xlsx'  # 請替換成你的Excel文件路徑
    import os
    # 上傳文件
    file_metadata = {
        'name': os.path.basename(excel_file_path),
        'parents': [folder_id]
    }
    media = MediaFileUpload(excel_file_path, mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    file = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()

    print('File ID: %s' % file.get('id'))